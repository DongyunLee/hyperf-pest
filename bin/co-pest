#!/usr/bin/env php
<?php declare(strict_types=1);

use Cooper\HyperfPest\Console\Command;
use NunoMaduro\Collision\Provider;
use Pest\Actions\ValidatesEnvironment;
use Pest\Support\Container as PestContainer;
use Pest\TestSuite;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Console\Output\OutputInterface;

(static function () {
    // Used when Pest is required using composer.
    $vendorPath = dirname(__DIR__, 4).'/vendor/autoload.php';

    // Used when Pest maintainers are running Pest tests.
    $localPath = dirname(__DIR__).'/vendor/autoload.php';

    if (file_exists($vendorPath)) {
        include_once $vendorPath;
        $autoloadPath = $vendorPath;
    } else {
        include_once $localPath;
        $autoloadPath = $localPath;
    }

    (new Provider())->register();

    // Get $rootPath based on $autoloadPath
    $rootPath = dirname($autoloadPath, 2);

    $argv = new ArgvInput();

    $testSuite = TestSuite::getInstance($rootPath, $argv->getParameterOption('--test-directory', 'test'));

    $isDecorated = $argv->getParameterOption('--colors', 'always') !== 'never';
    $output = new ConsoleOutput(ConsoleOutput::VERBOSITY_NORMAL, $isDecorated);

    $pestContainer = PestContainer::getInstance();
    $pestContainer->add(TestSuite::class, $testSuite);
    $pestContainer->add(OutputInterface::class, $output);

    ValidatesEnvironment::in($testSuite);

    $args = $_SERVER['argv'];

    // Let's remove any arguments that PHPUnit does not understand
    if ($argv->hasParameterOption('--test-directory')) {
        foreach ($args as $key => $value) {
            if (strpos($value, '--test-directory') !== false) {
                unset($args[$key]);
            }
        }
    }

    $command = Command::class;

    $options = getopt('', ['prepend:']);
    if (isset($options['prepend'])) {
        require $options['prepend'];
    }
    unset($options);
    $code = 0;

    Swoole\Coroutine::set([
        'hook_flags' => SWOOLE_HOOK_ALL, 'exit_condition' => function () {
            return Swoole\Coroutine::stats()['coroutine_num'] === 0;
        }
    ]);
    Swoole\Coroutine\run(function () use (&$code, $pestContainer, $command, $args) {
        $code = $pestContainer->get($command)->run($args, false);
        Swoole\Timer::clearAll();
        Hyperf\Utils\Coordinator\CoordinatorManager::until(Hyperf\Utils\Coordinator\Constants::WORKER_EXIT)->resume();
    });
    die($code);
})();
